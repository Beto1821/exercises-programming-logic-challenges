// 11 - Array de notas musicais - 3 
// Uma m√∫sica normalmente √© uma sequ√™ncia de notas.
// Dada a escala maior natural de D√≥, cada uma das 7 notas possui um grau, representado por um algorismo romano.
// D√≥ R√©  Mi  F√° Sol L√° Si
// I  II  III IV  V  VI VII
// Al√©m disso, cada nota forma um acorde chamado tr√≠ade. A tr√≠ade √© composta por uma sequ√™ncia a partir dela com a "primeira" nota, a "ter√ßa" e a "quinta".
// Exemplos
// Tr√≠ade de D√≥: D√≥ (a primeira), Mi (a ter√ßa), Sol (a quinta).
// Tr√≠ade de R√©: R√© (a primeira), F√° (a ter√ßa), L√° (a quinta).
// Escreva um c√≥digo que recebe um array de notas, e retorna array de objetos, com os graus das notas na escala de d√≥ e as notas que formam sua tr√≠ade no seguinte formato:
// Entrada: ['R√©', 'Sol', 'D√≥'] 
// Sa√≠da:
// [
//   {
//     degree: 'II',
//     triad: ['R√©', 'F√°', 'L√°']
//   },
//   {
//     degree: 'V',
//     triad: [ 'Sol', 'Si', 'R√©' ]
//   },
//   {
//     degree: 'I',
//     triad: ['D√≥', 'Mi', 'Sol']
//   },
// ]


let musicNotes = ['R√©', 'Sol', 'D√≥'];

let allDegrees = {
  D√≥: "I",
  R√©: "II",
  Mi: "III",
  F√°: "IV",
  Sol: "V",
  L√°: "VI",
  Si: "VII",
}

let allDegreesKeys = Object.keys(allDegrees);
let musicNotesDetails = [];

for(let index = 0; index < musicNotes.length; index += 1){
  let thisNote = musicNotes[index];
  let thisDegree = allDegrees[thisNote];

  let noteIndex = allDegreesKeys.findIndex(key => key === thisNote);

  let thirdIndex = noteIndex + 2;
  let fifthIndex = noteIndex + 4;

  let third = allDegreesKeys[thirdIndex] || allDegreesKeys[thirdIndex - 7];
  let fifth = allDegreesKeys[fifthIndex] || allDegreesKeys[fifthIndex - 7];

  musicNotesDetails.push({
    degree: thisDegree,
    triad: [thisNote, third, fifth]
  })
}

console.log(musicNotesDetails)


// 12 - Fatorial
// A partir de um valor N, calcule e retorne o fatorial de N.
// Fatorial de N = N * fatorial(N-1).
// Defini√ß√£o: Fatorial de 0 = 1
// fat(3) = 3 * fat(2) // 6
// fat(2) = 2 * fat(1) // 2
// fat(1) = 1 * fat(0) // 1
// fat(0) = 1

function factorial(n) {
  if (n <= 1) {
    return 1;
  }
  return n * factorial(n - 1);
}


// 13 - Fibonnaci
// A sequ√™ncia de n√∫meros 0 1 1 2 3 5 8 13 21... √© conhecida como sequ√™ncia de Fibonacci. Nessa sequ√™ncia, cada n√∫mero, depois dos 2 primeiros, √© igual √† soma dos 2 anteriores.
// Escreva um algoritmo que a partir de um n√∫mero inteiro N mostre os N primeiros n√∫meros dessa s√©rie.
// Defini√ß√£o:
//   fib(0) = 0
//   fib(1) = 1
//   fib(n) = fib(n-1) + fib(n-2)
// Valor     : Sa√≠da esperada
// n = 5     : 0 1 1 2 3

function fibonnaci(n) {
  const fib = [0, 1];
  for (let count = 2; count <= n; count += 1) {
    let n1 = fib[count - 1];
    let n2 = fib[count - 2];
    fib.push(n1 + n2);
  }
  return fib[n];
}

// 14 - Soma de n√∫meros primos
// Fa√ßa um algoritmo que some n√∫meros primos de 0 √† 150.

function isPrimo(numero) {
  if(numero <= 1) 
      return false;
  
  for(let index = 2; index < numero; index += 1) {
      if(numero % index === 0)
      return false;
  }

  return true;
}

let soma = 0;
for(let index = 0; index <= 150; index += 1) {
  if(isPrimo(index)) {
      soma += index;
  }
}


// 15 - Fatorial e m√©dia
// Fa√ßa uma fun√ß√£o que calcule o fatorial de um n√∫mero e em seguida, fa√ßa a m√©dia dos fatoriais de 0 a 5.

function fatorial(numero) {
  if(numero === 0 || numero === 1) {
      return 1;
  }

  let fat = 1;
  for(let index = 2; index <= numero; index += 1) {
      fat *= index;
  }

  return fat;
}

let som = 0;
for(let index = 0; index <= 5; index += 1) {
  som += fatorial(index);
}

// 16 - Valida√ß√£o de CPF
// Desenvolva uma fun√ß√£o `cpfValidator`, que recebe uma string no formato de CPF `xxx.xxx.xxx-xx` e verifica se o CPF passado por par√¢metro √© v√°lido ou n√£o.
// Considere um CPF com os seguintes d√≠gitos:
// `abc.def.ghi-jk`
// Para descobrirmos o primeiro d√≠gito verificado `j`, procedemos da seguinte maneira: multiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim at√© multiplicarmos o nono por 9. Ent√£o, somamos tudo isto. O d√≠gito `j` √© o resto da divis√£o da soma por 11 (ou 0, caso o resto seja 10).
// Para o segundo d√≠gito verificador `k`, temos o seguinte: multiplicamos o segundo digito por 1, o terceiro por 2, o quarto por 3 e vamos assim at√© multiplicarmos o d√©cimo (primeiro d√≠gito verificador) por 9. Ent√£o, somamos tudo isto. O d√≠gito `k` ser√° o resto da divis√£o da soma por 11 (ou 0, caso o resto seja 10).
// Sabendo que isso vale para 100% dos CPFs, sua miss√£o √© implementar uma fun√ß√£o que, dado um CPF, diga se ele √© v√°lido ou n√£o.
// A sa√≠da da sua fun√ß√£o deve ser uma string. Quando o CPF for v√°lido, o retorno deve ser `'CPF v√°lido'`; quando o CPF for inv√°lido, o retorno deve ser `'CPF inv√°lido'`
// **Importante:**
// Uma sequ√™ncia de n√∫meros iguais, como por exemplo `'000.000.000-00'`, tamb√©m √© um CPF inv√°lido üòâ
// Exemplo:
// ```
// // Entrada:
// '397-606-448-34'
// // Sa√≠da:
// 'CPF inv√°lido'
// // Entrada:
// '166.354.840-43'
// // Sa√≠da:
// 'CPF v√°lido'
// ```
// **O que ser√° verificado:**
// - A fun√ß√£o deve retornar a mensagem `'CPF inv√°lido'`, quando o CPF for inv√°lido
// - A fun√ß√£o deve retornar a mensagem `'CPF v√°lido'`, quando o CPF for v√°lido.

function calcCpfFirstDigit(cpfArray) {
  const sum = cpfArray.slice(0, 9).reduce((sum, number, index) => sum + number * (index + 1), 0);
  const rest = sum % 11;
  if (rest === 10) {
    return 0;
  }
  return rest;
}
function calcCpfSecondDigit(cpfArray) {
  const sum = cpfArray.slice(0, 10).reduce((sum, number, index) => sum + number * index, 0);
  const rest = sum % 11;
  if (rest === 10) {
    return 0;
  }
  return rest;
}
function cpfValidator(cpf) {
  const cpfArray = cpf.replace(/[^0-9]/g, '')
    .split('')
    .map((strDigit) => parseInt(strDigit));

  if (!cpfArray.find((number) => number !== cpfArray[0])) {
    return 'CPF inv√°lido';
  }
  if (calcCpfFirstDigit(cpfArray) === cpfArray[9] &&
    calcCpfSecondDigit(cpfArray) === cpfArray[10]) {
    return 'CPF v√°lido';
  }

  return 'CPF inv√°lido';
}
